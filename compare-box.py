def is_bbox_overlap(bbox1, bbox2, buffer=0):
    """
    Check if two bounding boxes overlap with a specified buffer.

    Parameters:
    - bbox1: Bounding box coordinates [x1, y1, x2, y2] for the first box.
    - bbox2: Bounding box coordinates [x1, y1, x2, y2] for the second box.
    - buffer: Buffer value for overlapping (default is 0).

    Returns:
    - True if the bounding boxes overlap with the specified buffer, False otherwise.
    """
    x1_1, y1_1, x2_1, y2_1 = bbox1
    x1_2, y1_2, x2_2, y2_2 = bbox2

    # Check for non-overlapping conditions
    if x2_1 + buffer < x1_2 - buffer or x2_2 + buffer < x1_1 - buffer:
        return False  # Bboxes do not overlap in x-axis
    if y2_1 + buffer < y1_2 - buffer or y2_2 + buffer < y1_1 - buffer:
        return False  # Bboxes do not overlap in y-axis

    return True  # Bboxes overlap

# Example usage:
# Bounding boxes for recognized text generated by PaddleOCR
recognized_bbox = [100, 50, 200, 120]

# Bounding boxes in the dataset
dataset_bbox_1 = [90, 40, 180, 100]
dataset_bbox_2 = [210, 60, 300, 130]

# Compare recognized_bbox with dataset_bbox_1 and dataset_bbox_2 with a buffer of 5 pixels
buffer_value = 5
overlap_with_bbox_1 = is_bbox_overlap(recognized_bbox, dataset_bbox_1, buffer_value)
overlap_with_bbox_2 = is_bbox_overlap(recognized_bbox, dataset_bbox_2, buffer_value)

print(f"Overlap with dataset_bbox_1: {overlap_with_bbox_1}")
print(f"Overlap with dataset_bbox_2: {overlap_with_bbox_2}")
